from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from urllib.parse import urlparse
import textwrap


def initialize_driver():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Selenium WebDriver —Å —Ä–µ–∂–∏–º–æ–º headless (–±–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)."""
    options = Options()
    options.add_argument("--headless")  # –ó–∞–ø—É—Å–∫ –±–µ–∑ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    options.add_argument("--disable-gpu")
    options.add_argument("--no-sandbox")
    return webdriver.Chrome(options=options)


def get_wikipedia_article(driver, query):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—å—é –Ω–∞ –í–∏–∫–∏–ø–µ–¥–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    url = "https://ru.wikipedia.org/wiki/" + query.replace(" ", "_")
    driver.get(url)

    # –í–º–µ—Å—Ç–æ time.sleep() –∏—Å–ø–æ–ª—å–∑—É–µ–º WebDriverWait, —á—Ç–æ–±—ã –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    try:
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "bodyContent")))
    except:
        print("–û—à–∏–±–∫–∞: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å.")  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
    return url


def list_paragraphs(driver):
    """–í—ã–≤–æ–¥–∏—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã —Å—Ç–∞—Ç—å–∏ –ø–æ –æ–¥–Ω–æ–º—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è."""
    paragraphs = driver.find_elements(By.TAG_NAME, "p")
    wrapper = textwrap.TextWrapper(width=80)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è

    for i, paragraph in enumerate(paragraphs):
        text = paragraph.text.strip()
        if not text:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã

        print(f"\nüî• –ü–∞—Ä–∞–≥—Ä–∞—Ñ {i + 1}:\n" + "\n".join(wrapper.wrap(text)))  # –í—ã–≤–æ–¥–∏–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á—Ç–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–π—Ç–∏
        cont = input("\n–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
        if cont != "–¥–∞":
            break


def list_internal_links(driver):
    """–°–æ–±–∏—Ä–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –¥—Ä—É–≥–∏–µ —Å—Ç–∞—Ç—å–∏ –í–∏–∫–∏–ø–µ–¥–∏–∏."""
    links = driver.find_elements(By.XPATH, "//div[@id='bodyContent']//a[@href]")
    internal_links = {}

    current_url = driver.current_url
    current_path = urlparse(current_url).path  # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç—å–∏

    print("\nüîó –°–≤—è–∑–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:")
    count = 1
    for link in links:
        href = link.get_attribute("href")
        title = link.get_attribute("title")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º title, —Ç.–∫. –æ–Ω –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π

        if href and "wikipedia.org/wiki/" in href and ":" not in href:
            # –ò—Å–∫–ª—é—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç—å—é
            if urlparse(href).path != current_path:
                if title and title not in internal_links.values():
                    internal_links[count] = title
                    print(f"{count}. {title}")
                    count += 1
                    if count > 10:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 10 —Å—Å—ã–ª–æ–∫ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                        break

    return internal_links


def choose_link_and_navigate(driver, links):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Å—Å—ã–ª–∫—É –∏ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç–∞—Ç—å—é."""
    while True:
        try:
            link_choice = int(input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞: ").strip())
            if link_choice in links:
                get_wikipedia_article(driver, links[link_choice])
                break  # –£—Å–ø–µ—à–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ - –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
            else:
                print("üö® –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except ValueError:
            print("‚ö† –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–∞–¥–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã


def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    driver = initialize_driver()
    try:
        query = input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ").strip()
        get_wikipedia_article(driver, query)

        while True:
            print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
            print("1. –õ–∏—Å—Ç–∞—Ç—å –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç—å–∏")
            print("2. –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü")
            print("3. –í—ã–π—Ç–∏")

            choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: ").strip()

            if choice == "1":
                list_paragraphs(driver)
            elif choice == "2":
                links = list_internal_links(driver)
                if links:
                    choose_link_and_navigate(driver, links)
                else:
                    print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.")
            elif choice == "3":
                print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
                break
            else:
                print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        driver.quit()  # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ


if __name__ == "__main__":
    main()
